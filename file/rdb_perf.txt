性能対策:方針（検討）


■テーブル、インデックス、クエリ、統計情報の観点で性能対策します

▼テーブル（性能向上期待度：△）
問題：ディスク容量の逼迫
対策：不要レコードの削除
確認：SQLで確認
対応：VACUUM（同時にREINDEX、ANALYZEも実行されます）

▼インデックス（性能向上期待度：△）
問題：ディスク容量の逼迫
問題：断片化したインデックスによる処理速度低下
問題：インデックス用メモリ領域の逼迫によるディスク領域へのインデックス展開と処理性能低下
対策：不要インデックスの削除と断片化したインデックスの再作成
確認：SQLで確認（但し拡張機能）
対応：REINDEX（同時にANALYZEも実行されます）

▼クエリ（性能向上期待度：◎）
問題：レスポンスの遅延
対策：実行計画の改善
確認：SQLで確認
対応：EXPLAIN

▼統計情報（性能向上期待度：◎）
問題：古い統計情報を元にした適切でない実行計画（処理性能低下）
対策：統計情報の更新
確認：人の判断、SQLで確認
対応：ANALYZE




▼テーブル（性能向上期待度：△）
確認：SQLで確認
対応：VACUUM（同時にREINDEX、ANALYZEも実行されます）

▼インデックス（性能向上期待度：△）
確認：SQLで確認（但し拡張機能）
対応：REINDEX（同時にANALYZEも実行されます）

▼クエリ（性能向上期待度：◎）
確認：SQLで確認
対応：EXPLAIN

▼統計情報（性能向上期待度：◎）
確認：人の判断、SQLで確認
対応：ANALYZE


性能対策:方針（まとめ）


▼テーブル
確認：
SELECT * FROM pg_stat_user_tables WHERE relname = テーブル名;
SELECT * FROM pg_stat_user_tables WHERE relname = 'ticket_flights';

対応：
▽自動VACUUM有効化
postgresql.conf
　autovacuum = on
　track_counts = on

▽▽自動VACUUM実行条件
autovacuum_vacuum_threshold			50 レコード（デフォルト値）
autovacuum_vacuum_scale_factor		20 %（デフォルト値）

不要レコード数 ＞ autovacuum_vacuum_threshold + (レコード数 * autovacuum_vacuum_scale_factor)

レコード数が5000の場合は、50 + (5000 * 0.2) = 1050で、
不要レコード数 ＞ 1050

不要レコード数が、1050レコードを超えると自動VACUUMが実行されます。


▽▽自動ANALYZE実行条件
autovacuum_analyze_threshold		50 レコード（デフォルト値）
autovacuum_analyze_scale_factor		10 %（デフォルト値）

更新レコード数 ＞ autovacuum_analyze_threshold + (テーブル行数 * autovacuum_analyze_scale_factor)

テーブル行数が5000の場合は、50 + (5000 * 0.1) = 550で、
更新レコード数 ＞ 550

更新レコード数が、550レコードを超えると自動ANALYZEが実行されます。


▽▽手動VACUUM
VACUUM ANALYZE テーブル名;


▽▽VACUUM FULL
VACUUM FULL テーブル名;




▼インデックス
確認：
肥大化の傾向を取得するクエリ
SELECT relname, relpages, reltuples FROM pg_class WHERE relname = 'インデックス名';
SELECT relname, relpages, reltuples FROM pg_class WHERE relname = 'ticket_flights_pkey';

断片化の傾向を取得するクエリ
SELECT * FROM pgstatindex('インデックス名');
SELECT * FROM pgstatindex('ticket_flights_pkey');
leaf_fragmentationを確認、サーバに負荷がかかるので調査するタイミングには要注意！！

クラスタ性を確認するクエリ
SELECT tablename, attname, correlation FROM pg_stats WHERE tablename = 'テーブル名';
SELECT tablename, attname, correlation FROM pg_stats WHERE tablename = 'ticket_flights';
correlationが1に近ければ綺麗に並んでいる

対応：
自動VACUUMがonになっていれば、不要領域は削除され肥大化対策の必要はありません。
基本的に自動VACUUMで再利用させて、性能への影響が著しい場合は、REINDEXやCLUSTERを実施します。

↓REINDEX
REINDEX (VERBOSE) INDEX インデックス名;			対象インデックスのみ再構築
REINDEX (VERBOSE) TABLE テーブル名;			対象テーブル上の全てのインデックスを再構築
REINDEX (VERBOSE) TABLE CONCURRENTLY テーブル名;	ロックせずにインデックスを再構築
REINDEX (VERBOSE) SYSTEM カタログ名;
REINDEX (VERBOSE) DATABASE データベース名;

↓CLUSTER（クラスタ性復活）
CLUSTER テーブル名 USING インデックス名;

CLUSTER実行時の基準となるインデックスを確認
SELECT relname FROM pg_class
WHERE oid = (SELECT indexrelid from pg_class c, pg_index i 
    WHERE c.oid = i.indrelid AND i.indisclustered = 't'
    AND c.relname = 'テーブル名')

CLUSTER実行時の基準にインデックスを登録
ALTER TABLE テーブル名 CLUSTER ON インデックス名;

CLUSTER実行時の基準からインデックスを削除
ALTER TABLE テーブル名 SET WITHOUT CLUSTER;

REINDEXは対象のデータベースにログインした状態で行う必要があります。
シェルスクリプトなどで大量のデータベースのREINDEXを回す場合は以下をテンプレートにします。
psql -h <ホスト名> -d <データベース名> -c 'REINDEX DATABASE CONCURRENTLY "'<データベース名>'";'




▼クエリ
確認：
対応：
dvdrental=# EXPLAIN ANALYZE クエリ;




▼統計情報
確認：
自動・手動VACUUM、自動・手動ANALYZEの最終実行時刻の確認
SELECT * FROM pg_stat_user_tables WHERE relname = テーブル名;
SELECT * FROM pg_stat_user_tables WHERE relname = 'ticket_flights';

プランナーのコストと実際のコストに差分がある場合は統計情報が古い可能性あります。
EXPLAIN select * from ticket_flights;
EXPLAIN ANALYZE select * from ticket_flights;

対応：
ANALYZE;
テーブル指定のANALYZE
ANALYZE スキーマ名.テーブル名
